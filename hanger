#!/usr/bin/env node
/*
 * HANGER CLI
 */

class Hanger {
    args;
    fs;

    /* colors */
    Reset = "\x1b[0m"
    Bright = "\x1b[1m"
    Dim = "\x1b[2m"
    Underscore = "\x1b[4m"
    Blink = "\x1b[5m"
    Reverse = "\x1b[7m"
    Hidden = "\x1b[8m"

    FgBlack = "\x1b[30m"
    FgRed = "\x1b[31m"
    FgGreen = "\x1b[32m"
    FgYellow = "\x1b[33m"
    FgBlue = "\x1b[34m"
    FgMagenta = "\x1b[35m"
    FgCyan = "\x1b[36m"
    FgWhite = "\x1b[37m"
    FgGray = "\x1b[90m"

    BgBlack = "\x1b[40m"
    BgRed = "\x1b[41m"
    BgGreen = "\x1b[42m"
    BgYellow = "\x1b[43m"
    BgBlue = "\x1b[44m"
    BgMagenta = "\x1b[45m"
    BgCyan = "\x1b[46m"
    BgWhite = "\x1b[47m"
    BgGray = "\x1b[100m"
    
    
    constructor(args) {
        this.args = args;
        this.fs = require('fs');
    }

    getLogo() {
        console.clear();
        console.log(' ');
        console.log(' ');
        console.log(this.FgWhite, '   ░█░█░█▀█░█▀█░█▀▀░█▀▀░█▀▄');
        console.log(this.FgWhite, '   ░█▀█░█▀█░█░█░█░█░█▀▀░█▀▄');
        console.log(this.FgWhite, '   ░▀░▀░▀░▀░▀░▀░▀▀▀░▀▀▀░▀░▀');
        console.log(' ');
        console.log(this.FgGreen, '  ┌────────────────────────┐');
        console.log(this.FgGreen, '  │ Hanger CLI for MVCJS   │');
        console.log(this.FgGreen, '  └────────────────────────┘');
        console.log(' ');
        console.log(this.FgRed, 'Use --help || -h to display manual')
        console.log(' ');
        console.log(' ');
    }

    help() {
        console.clear();
        console.log(' ');
        console.log(' ');
        console.log(this.FgGreen, '   ┌────────────────────────────────────────────────────────────────────────────────────────────────────────┐');
        console.log(this.FgGreen, '   │ Welcome in HANGER manual, at the bottom is a list of commands available in this version of our CLI     │');
        console.log(this.FgGreen, '   └────────────────────────────────────────────────────────────────────────────────────────────────────────┘');
        console.log(' ');
        console.log(this.FgGreen, '                                          » HELP ME STEPDEV IM STUCK! «                                   ');
        console.log(' ');
        console.log(this.FgWhite, ' ');
        console.log(`${this.BgGreen}`, ' » -c or --create [controller|middleware] {NAME}', `${this.Reset}${this.FgGreen}`);
        console.log(`${this.Reset}${this.FgGreen}`);
        console.log(' │ Create new file in catalog /App.');
        console.log(' │ example -c controller MainController : create controller named MainController', `${this.Reset}${this.FgRed}`, '(if you forgot "Controller" sufix, we will paste it for you.)', `${this.Reset}${this.FgGreen}`);
        console.log(' ')
        console.log(' ')
        console.log(this.FgWhite, ' ');
        console.log(`${this.BgGreen}`, ' » -s or --serve', `${this.Reset}${this.FgGreen}`);
        console.log(`${this.Reset}${this.FgGreen}`);
        console.log(' │ Run application in',`${this.Reset}${this.FgRed}`, 'DEVELOPMENT MODE.', `${this.Reset}${this.FgGreen}`);
        console.log(' ')
        console.log(' ')
    }

    createError(type) {
            console.clear();
            console.log(' ');
            console.log(this.FgRed, '   ┌Fatal error!────────────────────────────────────────────────────────────────────────────────────────────┐');
            console.log(this.FgRed, '   │                                                                                                        │');
            console.log(this.FgRed, '   │ please use correct argument like: -c, --create, controller, -s, --serve or just type -h or --help      │');
            console.log(this.FgRed, '   │                                                                                                        │');
            console.log(this.FgRed, '   │ example:                                                                                               │');
            console.log(this.FgRed, '   │                                                                                                        │');
            console.log(this.FgRed, '   │ hanger --create controller MainController                                                              │');
            console.log(this.FgRed, '   │                                                                                                        │');
            console.log(this.FgRed, '   └────────────────────────────────────────────────────────────────────────────────────────────────────────┘');
            console.log(' ');
    }

    create() {
        console.clear();
        if (!this.args[3] || !this.args[4]) {
           this.createError();
            console.log('asd');
           return false;
        }  

        let argOne = this.args[3];
        let argTwo = this.args[4];

        if (argOne === 'controller') {
            this.createController(argTwo);
        } else if (argOne === 'middleware') {
            this.createMiddleware(argTwo);
        } else {
            this.createError();
        }
    }

    createController(name) {
        console.clear();
        let _name = name;
        
        if (name.toLowerCase().indexOf('controller') === -1) {
            _name = name + 'Controller';
        }

        let path = `/${__dirname}/App/Controllers/${_name}.js`;

        if (this.fs.existsSync(path)) {
            console.clear();
            console.log(' ');
            console.log(this.FgRed, '   ┌Fatal error!────────────────────────────────────────────────────────────────────────────────────────────┐');
            console.log(this.FgRed, '   │                                                                                                        │');
            console.log(this.FgRed, `   │ Looks like ${_name}.js exist in ${__dirname}/App/Controllers/                 │`);
            console.log(this.FgRed, '   │                                                                                                        │');
            console.log(this.FgRed, '   └────────────────────────────────────────────────────────────────────────────────────────────────────────┘');
            console.log(' ');
            return false;
        }
        
        let controllerContent = `const Controller = require('./Controller');

class ${_name} extends Controller {

    index(Request, Response) {
    // Do something!
    }
}


module.exports = new ${_name}();
        `;

        this.fs.writeFile(path, controllerContent, (err) => {
            if (err) throw err;
            this.succesSaved(path);
          });
    }

    createMiddleware(name) {
        console.clear();
        let _name = name;
        
        if (name.toLowerCase().indexOf('controller') === -1) {
            _name = name + 'Controller';
        }

        let path = `/${__dirname}/App/Middlewares/${_name}.js`;

        if (this.fs.existsSync(path)) {
            console.clear();
            console.log(' ');
            console.log(this.FgRed, '   ┌Fatal error!────────────────────────────────────────────────────────────────────────────────────────────┐');
            console.log(this.FgRed, '   │                                                                                                        │');
            console.log(this.FgRed, `   │ Looks like ${_name}.js exist in ${__dirname}/App/Middlewares/                 │`);
            console.log(this.FgRed, '   │                                                                                                        │');
            console.log(this.FgRed, '   └────────────────────────────────────────────────────────────────────────────────────────────────────────┘');
            console.log(' ');
            return false;
        }
        
        let middlewareContent = `const Middleware = require('./Middleware');

class ${_name} extends Middleware {

    handle(Request, Response) {
    // Do something!
    }
}


module.exports = new ${_name}();
        `;

        this.fs.writeFile(path, middlewareContent, (err) => {
            if (err) throw err;
            this.succesSaved(path);
          });
    }

    succesSaved(path) {
        console.clear();
        console.log(' ');
        console.log(this.FgGreen,'   ┌Created!────────────────────────────────────────────────────────────────────────────────────────────────┐');
        console.log(this.FgGreen,'   │                                                                                                        │');
        console.log(this.FgGreen,`   │  New file created in ${path}`);
        console.log(this.FgGreen,'   │                                                                                                        │');
        console.log(this.FgGreen,'   └────────────────────────────────────────────────────────────────────────────────────────────────────────┘');
        console.log(' ');
    }

    handle() {
        
        let command = this.args[2] ?? false;
        
        if (!command) {
            this.getLogo();

            return false;
        }

        if (typeof command !== 'string') {
            console.log('Argument must be string!');

            return false;
        }

        switch(command) {
            case '-c':
            case '--create':
                this.create()
                break;
            case '-h':
            case '--help':
                this.help();
                break;
        }
    }
}

const hanger = new Hanger(process.argv);

hanger.handle();